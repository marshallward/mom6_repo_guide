=================
 MOM6 Repo Guide
=================

:author: Marshall Ward
:description: An overview of MOM6 repository management
:date: 2022-13-05
:url: https://marshallward.org/repo_guide.html
:preface:
   Introductory comments, written to slide notes


Repository Space
================

.. image:: img/consortium.svg
   :width: 50%
   :class: float

Inner radius
   History-preserving

Outer radius
   Nonhistoric "Drafts"

Nodes (eventually) share a common history via MOM-ocean hub


History preservation
====================

* Who should preserve history?

   * Production runs with defined source
   
   * Anyone *sharing code* with production source
   
     * i.e. Group "main" branches ("``dev/XXX``")

* Who can rewrite history?

   * Individual PRs
   
   * External contributions


Why curate?
===========

* Ensure every commit will run and pass tests

* ``git bisect`` debugging

   * Broken commits break bisection

* Well-documented development history

  * Code is "how", commits are "why"

  * Efficient code review

  * Improves automated reporting


Curated Example
===============

.. include:: src/git.log
   :code: txt


Commits in Linux
================

   Commit messages to me are almost as important as the code change itself.

   If you can explain the code change to me, I will trust the code.

Linus Torvalds, Linux OSS 2020

.. notes::

   https://www.youtube.com/watch?v=H8Gd9t7FQqI


Commits as email
================

Historically, commits were *emails* sent to maintainers

* The patch was the commit

* The log was the email (subject + body)

Emails follow a standard (RFC 5822)

* "Lines â€¦ SHOULD be limited to 78 characters"

* Subject usually reduced to 50 to account for hash

The closer you follow these rules, the better the results you will get out of
git.


GFDL dev cycle
==============

1. Create a branch from mainline

   .. code::

      $ git checkout dev/gfdl
      $ git pull
      $ git checkout -b new_feature

2. Do actual work 

3. Commit changes

   .. code::

      $ git status      # verify changes
      $ git add ...     # explicitly add (if feasible)
      $ git commit      # Long-form, no `-m`

4. Repeat and add commits as needed


Submitting PRs
==============

1. Fetch latest mainline branch::

      $ git fetch origin dev/gfdl

2. Clean up commits with rebase::

      $ git rebase -i dev/gfdl   # Opens an interactive session

4. Push to your GitHub account, submit PR::

      $ git push marshall new_feature


Rebase example
==============

.. include:: src/rebase.log
   :code: txt


Submit PR to branch
===================

Clicky clicky


Fast-forward vs no-ff
=====================

.. image:: img/git_ff.png
   :width: 40%
   :class: float

Linear history merge

.. code::

   git merge new_feature dev/gfdl

Branch-preserving merge

.. code::

   git merge --no-ff new_feature dev/gfdl

GitHub is branch-preserving; use CLI for FF merge


Submission Checklist
====================

TODO

1. Has it passed testing?

2. Are all commits relevant?

3. ...?


Submit PR for main
==================

0. Backup branch?  Update main?

1. Create a candidate branch

   * ``dev-gfdl-main-candidate-YYYYMMDD``

   * Allow ``dev/gfdl`` to continue during review

2. Submit PR from ``dev/gfdl`` to ``mom-ocean:main``

3. If 5x approval, *merge* to preserve history

   * As I learned, never rebase or squash!


Discussion
==========

TODO

1. What is the update frequency?

   * How often can we handle testing?

2. How aggressive to enforce commit logs?

3. ...?
